from settings import BOT_TOKEN, PROXY_URL, PROXY_LOGIN, PROXY_PASS, ADMIN_ID
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types import CallbackQuery
import logging
import keyboards as kb
import aiohttp
from database import DBCommands, create_db
from message_text import bot_info, bot_info_more, bot_quote, usage
from states import Consultation

db = DBCommands()

logging.basicConfig(level=logging.INFO)

PROXY_AUTH = aiohttp.BasicAuth(login=PROXY_LOGIN, password=PROXY_PASS)

bot = Bot(token=BOT_TOKEN,
          #proxy=PROXY_URL,
          #proxy_auth=PROXY_AUTH,
          parse_mode="HTML")

dp = Dispatcher(bot, storage=MemoryStorage())


async def on_startup(dp):
    await create_db()


@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: types.Message):
    referral = message.get_args()
    await db.add_new_user(referral=referral)
    text = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n\n' \
           f'–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π —á–∞—Ç-–±–æ—Ç–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.' \
           f'–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã –∏ –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.\n' \
           f'–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —á–∞—Ç-–±–æ—Ç—ã:\n\n' \
           f'üéØ—Å–æ–±–∏—Ä–∞—Ç—å –≤ –æ–¥–Ω—É –±–∞–∑—É –≤–∞—à—É –∞—É–¥–∏—Ç–æ—Ä–∏—é,\n' \
           f'üéØ–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã,\n' \
           f'üéØ—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –∏ –±—é–¥–∂–µ—Ç,\n' \
           f'üéØ–ø—Ä–∏–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ä—ã—Ö,\n' \
           f'üéØ–±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ 24/7.\n\n' \
           f'–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏ –∏–∑—É—á–∞–π üîé'
    await message.answer(text=text, reply_markup=kb.start)


@dp.message_handler(text='ü§ñ–û —á–∞—Ç –±–æ—Ç–∞—Ö', state='*')
async def books_handler(message: types.Message):
    await message.answer(bot_info, reply_markup=kb.capabilities)


@dp.callback_query_handler(lambda call: call.data in ['capabilities'], state='*')
async def items_handler(call: CallbackQuery):
    await call.message.answer(bot_info_more)
    await call.message.answer(bot_quote, reply_markup=kb.info)


@dp.message_handler(text='‚öôÔ∏è–ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —á–∞—Ç –±–æ—Ç–æ–≤?',  state='*')
async def books_handler(message: types.Message):
    await message.answer(usage)


@dp.message_handler(text='üõí–ó–∞–∫–∞–∑–∞—Ç—å —á–∞—Ç-–±–æ—Ç–∞', state='*')
async def books_handler(message: types.Message):
    await message.answer('–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–∏–∑–Ω–µ—Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å.')
    await Consultation.business_type.set()


@dp.message_handler(text='üì≤–ö–æ–Ω—Ç–∞–∫—Ç—ã', state='*')
async def books_handler(message: types.Message):
    print(message)
    await message.answer('–ú–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Å—Å—ã–ª–∫–∞–º', reply_markup=kb.connection)


@dp.message_handler(text='ü§ù–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', state='*')
async def books_handler(message: types.Message):
    bot_username = (await bot.me).username
    bot_link = f'http://t.me/{bot_username}?start={message.from_user.id}'
    count_referrals = await db.count_referrals()
    await message.answer(f'<b>–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n'
                         f'–ü–æ–ª—É—á–∏ 500 —Ä—É–±–ª–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∑–∞–∫–∞–∂–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞!\n\n'
                         f'–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n'
                         f'{bot_link} \n\n'
                         f'–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count_referrals}')


@dp.message_handler(text='üìÇ–ì–æ—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã', state='*')
async def books_handler(message: types.Message, state: FSMContext):
    await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–æ–≤.')
    items = await db.get_items()
    print(items)
    items_kb = await kb.cart_keyboard(len(items), 0, items[0])
    await message.answer(f'<b>{items[0].name}</b>\n'
                         f'<a href="{items[0].photo_url}">..</a>\n'
                         f'{items[0].description}', reply_markup=items_kb)
    await state.update_data(items=items, i=0)


@dp.callback_query_handler(lambda call: call.data in ['pay', 'question'], state='*')
async def items_handler(call: CallbackQuery):
    await bot.answer_callback_query(call.id)
    if call.data == 'pay':
        await call.message.answer('–ö–∞–∫–∏–º –±–∏–∑–Ω–µ—Å–æ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?–°–æ–æ–±—â–µ–Ω–∏–µ –ø–∏—à–∏—Ç–µ –ø—Ä—è–º–æ —Å—é–¥–∞')
        await Consultation.business_type.set()
    if call.data == 'question':
        await call.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?')
        await Consultation.business_type.set()


@dp.message_handler(text='‚ùì–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', state='*')
async def books_handler(message: types.Message):
    await message.answer('–î–ª—è –∫–∞–∫–æ–π —Å—Ñ–µ—Ä—ã –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ—Ç?–°–æ–æ–±—â–µ–Ω–∏–µ –ø–∏—à–∏—Ç–µ –ø—Ä—è–º–æ —Å—é–¥–∞')
    await Consultation.business_type.set()


@dp.message_handler(state=Consultation.business_type)
async def books_handler(message: types.Message, state: FSMContext):
    await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.')
    await state.reset_state()


@dp.callback_query_handler(lambda call: call.data in ['left', 'right'], state='*')
async def items_handler(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    items = data.get('items')
    if call.data == 'right':
        await bot.answer_callback_query(call.id)
        i = data.get('i')
        if i != len(items) - 1:
            i = i + 1
            items_kb = await kb.cart_keyboard(len(items), i, items[i])
            await call.message.edit_text(
                f'<b>{items[i].name}</b>\n'
                f'<a href="{items[i].photo_url}">..</a>\n'
                f'{items[i].description}', reply_markup=items_kb
            )
            await state.update_data(i=i)

    if call.data == 'left':
        await bot.answer_callback_query(call.id)
        i = data.get('i')
        if i != 0:
            i = i-1
            items_kb = await kb.cart_keyboard(len(items), i, items[i])
            await call.message.edit_text(
                f'<b>{items[i].name}</b>\n'
                f'<a href="{items[i].photo_url}">..</a>\n'
                f'{items[i].description}', reply_markup=items_kb
            )
            await state.update_data(i=i)


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)




